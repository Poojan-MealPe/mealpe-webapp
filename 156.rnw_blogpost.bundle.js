(self.webpackChunkmealpe=self.webpackChunkmealpe||[]).push([[156],{98156:(e,t,r)=>{"use strict";r.r(t),r.d(t,{SDK_VERSION:()=>R,default:()=>F,firebase:()=>k});var i=r(59079),s=r(83077);class n{constructor(e,t){this._auth=e,this._verificationId=t}confirm(e){return this._auth.native.confirmationResultConfirm(e).then((e=>this._auth._setUserCredential(e)))}get verificationId(){return this._verificationId}}var a=r(81436);let o=0;class h{constructor(e,t,r,s){this._auth=e,this._reject=null,this._resolve=null,this._promise=null,this._jsStack=(new Error).stack,this._timeout=r||20,this._phoneAuthRequestId=o++,this._forceResending=s||!1,this._internalEvents={codeSent:`phone:auth:${this._phoneAuthRequestId}:onCodeSent`,verificationFailed:`phone:auth:${this._phoneAuthRequestId}:onVerificationFailed`,verificationComplete:`phone:auth:${this._phoneAuthRequestId}:onVerificationComplete`,codeAutoRetrievalTimeout:`phone:auth:${this._phoneAuthRequestId}:onCodeAutoRetrievalTimeout`},this._publicEvents={error:`phone:auth:${this._phoneAuthRequestId}:error`,event:`phone:auth:${this._phoneAuthRequestId}:event`,success:`phone:auth:${this._phoneAuthRequestId}:success`},this._subscribeToEvents(),i.m0&&this._auth.native.verifyPhoneNumber(t,this._phoneAuthRequestId+"",this._timeout,this._forceResending),i.un&&this._auth.native.verifyPhoneNumber(t,this._phoneAuthRequestId+"")}_subscribeToEvents(){const e=Object.keys(this._internalEvents);for(let t=0,r=e.length;t<r;t++){const r=e[t],i=this._auth.emitter.addListener(this._internalEvents[r],(e=>{this[`_${r}Handler`](e),i.remove()}))}}_addUserObserver(e){this._auth.emitter.addListener(this._publicEvents.event,e)}_emitToObservers(e){this._auth.emitter.emit(this._publicEvents.event,e)}_emitToErrorCb(e){const{error:t}=e;this._reject&&this._reject(t),this._auth.emitter.emit(this._publicEvents.error,t)}_emitToSuccessCb(e){this._resolve&&this._resolve(e),this._auth.emitter.emit(this._publicEvents.success,e)}_removeAllListeners(){setTimeout((()=>{Object.values(this._internalEvents).forEach((e=>{this._auth.emitter.removeAllListeners(e)})),Object.values(this._publicEvents).forEach((e=>{this._auth.emitter.removeAllListeners(e)}))}),0)}_promiseDeferred(){if(!this._promise){const{promise:e,resolve:t,reject:r}=(0,i.if)();this._promise=e,this._resolve=t,this._reject=r}}_codeSentHandler(e){const t={verificationId:e.verificationId,code:null,error:null,state:"sent"};this._emitToObservers(t),i.un&&this._emitToSuccessCb(t),i.m0}_codeAutoRetrievalTimeoutHandler(e){const t={verificationId:e.verificationId,code:null,error:null,state:"timeout"};this._emitToObservers(t),this._emitToSuccessCb(t)}_verificationCompleteHandler(e){const t={verificationId:e.verificationId,code:e.code||null,error:null,state:"verified"};this._emitToObservers(t),this._emitToSuccessCb(t),this._removeAllListeners()}_verificationFailedHandler(e){const t={verificationId:e.verificationId,code:null,error:null,state:"error"};t.error=new a.A({userInfo:e.error},this._jsStack,"auth"),this._emitToObservers(t),this._emitToErrorCb(t),this._removeAllListeners()}on(e,t,r,s){if("state_changed"!==e)throw new Error("firebase.auth.PhoneAuthListener.on(*, _, _, _) 'event' must equal 'state_changed'.");if(!(0,i.Tn)(t))throw new Error("firebase.auth.PhoneAuthListener.on(_, *, _, _) 'observer' must be a function.");if(this._addUserObserver(t),(0,i.Tn)(r)){const e=this._auth.emitter.addListener(this._publicEvents.error,(t=>{e.remove(),r(t)}))}if((0,i.Tn)(s)){const e=this._auth.emitter.addListener(this._publicEvents.success,(t=>{e.remove(),s(t)}))}return this}then(e){if(this._promiseDeferred(),this._promise)return this._promise.then.bind(this._promise)(e)}catch(e){if(this._promiseDeferred(),this._promise)return this._promise.catch.bind(this._promise)(e)}}const u="emailLink",d="password",l="facebook.com",c="github.com",p="google.com",_="oauth",m="oidc.",v="phone",g="twitter.com",f="apple.com";class b{constructor(e){this._auth=e,this._appVerificationDisabledForTesting=!1}get appVerificationDisabledForTesting(){return this._appVerificationDisabledForTesting}set appVerificationDisabledForTesting(e){this._appVerificationDisabledForTesting=e,this._auth.native.setAppVerificationDisabledForTesting(e)}setAutoRetrievedSmsCodeForPhoneNumber(e,t){return i.m0?this._auth.native.setAutoRetrievedSmsCodeForPhoneNumber(e,t):Promise.resolve(null)}}class w{constructor(e,t){this._auth=e,this._user=t}get displayName(){return this._user.displayName||null}get email(){return this._user.email||null}get emailVerified(){return this._user.emailVerified||!1}get isAnonymous(){return this._user.isAnonymous||!1}get metadata(){const{metadata:e}=this._user;return{lastSignInTime:new Date(e.lastSignInTime).toISOString(),creationTime:new Date(e.creationTime).toISOString()}}get multiFactor(){return this._user.multiFactor||null}get phoneNumber(){return this._user.phoneNumber||null}get tenantId(){return this._user.tenantId||null}get photoURL(){return this._user.photoURL||null}get providerData(){return this._user.providerData}get providerId(){return this._user.providerId}get uid(){return this._user.uid}delete(){return this._auth.native.delete().then((()=>{this._auth._setUser()}))}getIdToken(e=!1){return this._auth.native.getIdToken(e)}getIdTokenResult(e=!1){return this._auth.native.getIdTokenResult(e)}linkWithCredential(e){return this._auth.native.linkWithCredential(e.providerId,e.token,e.secret).then((e=>this._auth._setUserCredential(e)))}reauthenticateWithCredential(e){return this._auth.native.reauthenticateWithCredential(e.providerId,e.token,e.secret).then((e=>this._auth._setUserCredential(e)))}reload(){return this._auth.native.reload().then((e=>{this._auth._setUser(e)}))}sendEmailVerification(e){if((0,i.Gv)(e)){if(!(0,i.Kg)(e.url))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.url' expected a string value.");if(!(0,i.b0)(e.dynamicLinkDomain)&&!(0,i.Kg)(e.dynamicLinkDomain))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.dynamicLinkDomain' expected a string value.");if(!(0,i.b0)(e.handleCodeInApp)&&!(0,i.Lm)(e.handleCodeInApp))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.handleCodeInApp' expected a boolean value.");if(!(0,i.b0)(e.iOS)){if(!(0,i.Gv)(e.iOS))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS' expected an object value.");if(!(0,i.Kg)(e.iOS.bundleId))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS.bundleId' expected a string value.")}if(!(0,i.b0)(e.android)){if(!(0,i.Gv)(e.android))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android' expected an object value.");if(!(0,i.Kg)(e.android.packageName))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.packageName' expected a string value.");if(!(0,i.b0)(e.android.installApp)&&!(0,i.Lm)(e.android.installApp))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.installApp' expected a boolean value.");if(!(0,i.b0)(e.android.minimumVersion)&&!(0,i.Kg)(e.android.minimumVersion))throw new Error("firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.minimumVersion' expected a string value.")}}return this._auth.native.sendEmailVerification(e).then((e=>{this._auth._setUser(e)}))}toJSON(){return Object.assign({},this._user)}unlink(e){return this._auth.native.unlink(e).then((e=>this._auth._setUser(e)))}updateEmail(e){return this._auth.native.updateEmail(e).then((e=>{this._auth._setUser(e)}))}updatePassword(e){return this._auth.native.updatePassword(e).then((e=>{this._auth._setUser(e)}))}updatePhoneNumber(e){return this._auth.native.updatePhoneNumber(e.providerId,e.token,e.secret).then((e=>{this._auth._setUser(e)}))}updateProfile(e){return this._auth.native.updateProfile(e).then((e=>{this._auth._setUser(e)}))}verifyBeforeUpdateEmail(e,t){if(!(0,i.Kg)(e))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(*) 'newEmail' expected a string value.");if((0,i.Gv)(t)){if(!(0,i.Kg)(t.url))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.url' expected a string value.");if(!(0,i.b0)(t.dynamicLinkDomain)&&!(0,i.Kg)(t.dynamicLinkDomain))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.dynamicLinkDomain' expected a string value.");if(!(0,i.b0)(t.handleCodeInApp)&&!(0,i.Lm)(t.handleCodeInApp))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.handleCodeInApp' expected a boolean value.");if(!(0,i.b0)(t.iOS)){if(!(0,i.Gv)(t.iOS))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS' expected an object value.");if(!(0,i.Kg)(t.iOS.bundleId))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS.bundleId' expected a string value.")}if(!(0,i.b0)(t.android)){if(!(0,i.Gv)(t.android))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android' expected an object value.");if(!(0,i.Kg)(t.android.packageName))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.packageName' expected a string value.");if(!(0,i.b0)(t.android.installApp)&&!(0,i.Lm)(t.android.installApp))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.installApp' expected a boolean value.");if(!(0,i.b0)(t.android.minimumVersion)&&!(0,i.Kg)(t.android.minimumVersion))throw new Error("firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.minimumVersion' expected a string value.")}}return this._auth.native.verifyBeforeUpdateEmail(e,t).then((e=>{this._auth._setUser(e)}))}linkWithPhoneNumber(){throw new Error("firebase.auth.User.linkWithPhoneNumber() is unsupported by the native Firebase SDKs.")}linkWithPopup(){throw new Error("firebase.auth.User.linkWithPopup() is unsupported by the native Firebase SDKs.")}linkWithRedirect(){throw new Error("firebase.auth.User.linkWithRedirect() is unsupported by the native Firebase SDKs.")}reauthenticateWithPhoneNumber(){throw new Error("firebase.auth.User.reauthenticateWithPhoneNumber() is unsupported by the native Firebase SDKs.")}reauthenticateWithPopup(){throw new Error("firebase.auth.User.reauthenticateWithPopup() is unsupported by the native Firebase SDKs.")}reauthenticateWithRedirect(){throw new Error("firebase.auth.User.reauthenticateWithRedirect() is unsupported by the native Firebase SDKs.")}get refreshToken(){throw new Error("firebase.auth.User.refreshToken is unsupported by the native Firebase SDKs.")}}var I=r(68447),E=r.n(I);class A{constructor(e,t){this._auth=e,this.hints=t.hints,this.session=t.session}resolveSignIn(e){const{token:t,secret:r}=e;return this._auth.resolveMultiFactorSignIn(this.session,t,r)}}function U(e,t){return t.hasOwnProperty("userInfo")&&t.userInfo.hasOwnProperty("resolver")&&t.userInfo.resolver?new A(e,t.userInfo.resolver):null}class P{constructor(e,t){this._auth=e,void 0===t&&(t=e.currentUser),this._user=t,this.enrolledFactor=t.multiFactor.enrolledFactors}getSession(){return this._auth.native.getSession()}async enroll(e,t){const{token:r,secret:i}=e;return await this._auth.native.finalizeMultiFactorEnrollment(r,i,t),this._auth.currentUser.reload()}unenroll(){return Promise.reject(new Error("No implemented yet."))}}const C={AppleAuthProvider:class{constructor(){throw new Error("`new AppleAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return f}static credential(e,t){return{token:e,secret:t,providerId:f}}},EmailAuthProvider:class{constructor(){throw new Error("`new EmailAuthProvider()` is not supported on the native Firebase SDKs.")}static get EMAIL_LINK_SIGN_IN_METHOD(){return u}static get EMAIL_PASSWORD_SIGN_IN_METHOD(){return d}static get PROVIDER_ID(){return d}static credential(e,t){return{token:e,secret:t,providerId:d}}static credentialWithLink(e,t){return{token:e,secret:t,providerId:u}}},PhoneAuthProvider:class{constructor(){throw new Error("`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return v}static credential(e,t){return{token:e,secret:t,providerId:v}}},GoogleAuthProvider:class{constructor(){throw new Error("`new GoogleAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return p}static credential(e,t){return{token:e,secret:t,providerId:p}}},GithubAuthProvider:class{constructor(){throw new Error("`new GithubAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return c}static credential(e){return{token:e,secret:"",providerId:c}}},TwitterAuthProvider:class{constructor(){throw new Error("`new TwitterAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return g}static credential(e,t){return{token:e,secret:t,providerId:g}}},FacebookAuthProvider:class{constructor(){throw new Error("`new FacebookAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return l}static credential(e,t=""){return{token:e,secret:t,providerId:l}}},PhoneMultiFactorGenerator:class{static FACTOR_ID="phone";constructor(){throw new Error("`new PhoneMultiFactorGenerator()` is not supported on the native Firebase SDKs.")}static assertion(e){const{token:t,secret:r}=e;return{token:t,secret:r}}},OAuthProvider:class{constructor(){throw new Error("`new OAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return _}static credential(e,t){return{token:e,secret:t,providerId:_}}},OIDCAuthProvider:class{constructor(){throw new Error("`new OIDCAuthProvider()` is not supported on the native Firebase SDKs.")}static get PROVIDER_ID(){return m}static credential(e,t,r){return{token:t,secret:r,providerId:m+e}}},PhoneAuthState:{CODE_SENT:"sent",AUTO_VERIFY_TIMEOUT:"timeout",AUTO_VERIFIED:"verified",ERROR:"error"},getMultiFactorResolver:U,multiFactor:function(e){return console.warn("This method is deprecated. Please use auth().multiFactor(user) instead"),new P(e)}};class S extends s.aU{constructor(...e){super(...e),this._user=null,this._settings=null,this._authResult=!1,this._languageCode=this.native.APP_LANGUAGE[this.app._name],this._tenantId=null,this.languageCode||(this._languageCode=this.native.APP_LANGUAGE["[DEFAULT]"]),this.native.APP_USER[this.app._name]&&this._setUser(this.native.APP_USER[this.app._name]),this.emitter.addListener(this.eventNameForApp("auth_state_changed"),(e=>{this._setUser(e.user),this.emitter.emit(this.eventNameForApp("onAuthStateChanged"),this._user)})),this.emitter.addListener(this.eventNameForApp("phone_auth_state_changed"),(e=>{const t=`phone:auth:${e.requestKey}:${e.type}`;this.emitter.emit(t,e.state)})),this.emitter.addListener(this.eventNameForApp("auth_id_token_changed"),(e=>{this._setUser(e.user),this.emitter.emit(this.eventNameForApp("onIdTokenChanged"),this._user)})),this.native.addAuthStateListener(),this.native.addIdTokenListener()}get languageCode(){return this._languageCode}get tenantId(){return this._tenantId}get settings(){return this._settings||(this._settings=new b(this)),this._settings}get currentUser(){return this._user}_setUser(e){return this._user=e?new w(this,e):null,this._authResult=!0,this.emitter.emit(this.eventNameForApp("onUserChanged"),this._user),this._user}_setUserCredential(e){const t=new w(this,e.user);return this._user=t,this._authResult=!0,this.emitter.emit(this.eventNameForApp("onUserChanged"),this._user),{additionalUserInfo:e.additionalUserInfo,user:t}}async setLanguageCode(e){if(!(0,i.Kg)(e)&&!(0,i.kZ)(e))throw new Error("firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value");await this.native.setLanguageCode(e),null===e?(this._languageCode=this.native.APP_LANGUAGE[this.app._name],this.languageCode||(this._languageCode=this.native.APP_LANGUAGE["[DEFAULT]"])):this._languageCode=e}async setTenantId(e){if(!(0,i.Kg)(e))throw new Error("firebase.auth().setTenantId(*) expected 'tenantId' to be a string");this._tenantId=e,await this.native.setTenantId(e)}_parseListener(e){return"object"==typeof e?e.next.bind(e):e}onAuthStateChanged(e){const t=this._parseListener(e),r=this.emitter.addListener(this.eventNameForApp("onAuthStateChanged"),t);return this._authResult&&Promise.resolve().then((()=>{t(this._user||null)})),()=>r.remove()}onIdTokenChanged(e){const t=this._parseListener(e),r=this.emitter.addListener(this.eventNameForApp("onIdTokenChanged"),t);return this._authResult&&Promise.resolve().then((()=>{t(this._user||null)})),()=>r.remove()}onUserChanged(e){const t=this._parseListener(e),r=this.emitter.addListener(this.eventNameForApp("onUserChanged"),t);return this._authResult&&Promise.resolve().then((()=>{t(this._user||null)})),()=>{r.remove()}}signOut(){return this.native.signOut().then((()=>{this._setUser()}))}signInAnonymously(){return this.native.signInAnonymously().then((e=>this._setUserCredential(e)))}signInWithPhoneNumber(e,t){return i.m0?this.native.signInWithPhoneNumber(e,t||!1).then((e=>new n(this,e.verificationId))):this.native.signInWithPhoneNumber(e).then((e=>new n(this,e.verificationId)))}verifyPhoneNumber(e,t,r){let s=r,n=60;return(0,i.Lm)(t)?s=t:n=t,new h(this,e,n,s)}verifyPhoneNumberWithMultiFactorInfo(e,t){return this.native.verifyPhoneNumberWithMultiFactorInfo(e.uid,t)}verifyPhoneNumberForMultiFactor(e){const{phoneNumber:t,session:r}=e;return this.native.verifyPhoneNumberForMultiFactor(t,r)}resolveMultiFactorSignIn(e,t,r){return this.native.resolveMultiFactorSignIn(e,t,r).then((e=>this._setUserCredential(e)))}createUserWithEmailAndPassword(e,t){return this.native.createUserWithEmailAndPassword(e,t).then((e=>this._setUserCredential(e)))}signInWithEmailAndPassword(e,t){return this.native.signInWithEmailAndPassword(e,t).then((e=>this._setUserCredential(e)))}signInWithCustomToken(e){return this.native.signInWithCustomToken(e).then((e=>this._setUserCredential(e)))}signInWithCredential(e){return this.native.signInWithCredential(e.providerId,e.token,e.secret).then((e=>this._setUserCredential(e)))}sendPasswordResetEmail(e,t=null){return this.native.sendPasswordResetEmail(e,t)}sendSignInLinkToEmail(e,t={}){return this.native.sendSignInLinkToEmail(e,t)}isSignInWithEmailLink(e){return"string"==typeof e&&(e.includes("mode=signIn")||e.includes("mode%3DsignIn"))&&(e.includes("oobCode=")||e.includes("oobCode%3D"))}signInWithEmailLink(e,t){return this.native.signInWithEmailLink(e,t).then((e=>this._setUserCredential(e)))}confirmPasswordReset(e,t){return this.native.confirmPasswordReset(e,t)}applyActionCode(e){return this.native.applyActionCode(e).then((e=>{this._setUser(e)}))}checkActionCode(e){return this.native.checkActionCode(e)}fetchSignInMethodsForEmail(e){return this.native.fetchSignInMethodsForEmail(e)}verifyPasswordResetCode(e){return this.native.verifyPasswordResetCode(e)}useUserAccessGroup(e){return i.m0?Promise.resolve():this.native.useUserAccessGroup(e)}getRedirectResult(){throw new Error("firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.")}setPersistence(){throw new Error("firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.")}signInWithPopup(){throw new Error("firebase.auth().signInWithPopup() is unsupported by the native Firebase SDKs.")}signInWithRedirect(){throw new Error("firebase.auth().signInWithRedirect() is unsupported by the native Firebase SDKs.")}useDeviceLanguage(){throw new Error("firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.")}useEmulator(e){if(!e||!(0,i.Kg)(e)||!(0,i.AY)(e))throw new Error("firebase.auth().useEmulator() takes a non-empty string URL");let t=e;("boolean"!=typeof this.firebaseJson.android_bypass_emulator_url_remap||!this.firebaseJson.android_bypass_emulator_url_remap)&&i.m0&&t&&(t.startsWith("http://localhost")&&(t=t.replace("http://localhost","http://10.0.2.2"),console.log('Mapping auth host "localhost" to "10.0.2.2" for android emulators. Use real IP on real devices. You can bypass this behaviour with "android_bypass_emulator_url_remap" flag.')),t.startsWith("http://127.0.0.1")&&(t=t.replace("http://127.0.0.1","http://10.0.2.2"),console.log('Mapping auth host "127.0.0.1" to "10.0.2.2" for android emulators. Use real IP on real devices. You can bypass this behaviour with "android_bypass_emulator_url_remap" flag.')));const r=t.match(/^http:\/\/([\w\d-.]+):(\d+)$/);if(!r)throw new Error("firebase.auth().useEmulator() unable to parse host and port from URL");const s=r[1],n=parseInt(r[2],10);return this.native.useEmulator(s,n),[s,n]}getMultiFactorResolver(e){return U(this,e)}multiFactor(e){if(e.userId!==this.currentUser.userId)throw new Error("firebase.auth().multiFactor() only operates on currentUser");return new P(this,e)}}const R=E(),F=(0,s.KY)({statics:C,version:E(),namespace:"auth",nativeModuleName:"RNFBAuthModule",nativeEvents:["auth_state_changed","auth_id_token_changed","phone_auth_state_changed"],hasMultiAppSupport:!0,hasCustomUrlOrRegionSupport:!1,ModuleClass:S}),k=(0,s.uh)()},68447:e=>{e.exports="16.6.0"}}]);